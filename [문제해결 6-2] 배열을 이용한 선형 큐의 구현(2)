#include <stdio.h>
#include <stdlib.h>
typedef int element;
#define MAX_Q_SIZE 5

typedef struct {
	element* data;
	int front;
	int rear;
	int size;
}Queue;

Queue *initQueue( int n );
int isFull( Queue *q );
void enQueue( Queue *q, element data );
int isEmpty( Queue *q );
element deQueue( Queue *q );
void destroyQueue( Queue * q );
void printAll( Queue *q );

int main() {
	Queue *q;
	element data;
	q = initQueue( 5 ); 
	enQueue( q, 10 ) ;	printAll( q );
	enQueue( q, 20 ) ;	printAll( q );
	enQueue( q, 30 ) ;	printAll( q );
	enQueue( q, 40 ) ;	printAll( q );
	enQueue( q, 50 ) ;	printAll( q );
	data = deQueue( q );	printAll( q );
	enQueue( q, 60 ) ; 	printAll( q );
	
	destroyQueue( q );
	return 0;
}
Queue* initQueue( int n ){
	Queue *temp = (Queue *) malloc( sizeof(Queue) );
	temp -> size = n;  // n을 크기로 하는 큐
	temp -> rear =  -1;//초기에는 큐가 비어있으니 rear,front -1로 초기화
	temp -> front = -1;
	temp -> data = (element*)malloc(n * sizeof(element));  // 크기 n 을 가지는 동적 배열 생성
	return temp;
}
int isFull( Queue *q ){
	// 큐가 가득 차 있다면 rear 은 어떤 상태일까?
	return	q -> rear == q -> rear -1;//큐는 rear가 -1일때 큐가 가득찼다고 판단
}
void enQueue( Queue *q, element data ){
	 // 가득 차 있다면 "Queue is full"이라고 출력
	 // 아니면 rear에 data 삽입
	if(isFull(q)){
	 printf("q가 가득 찼습니다\n");
	return;
	}
	else{
		q->data[++q->rear] = data;
	}
}
int isEmpty( Queue *q ){
	// 큐가 비어 있다면 rear과 front 는 어떤 상태일까?
	return q -> front == q -> rear;

}
element deQueue( Queue *q ){
	// 비어 있다면 "Queue is empty" 출력하고 0 리턴
  // 아니면 front위치의 데이터 리턴
	if(isEmpty(q)){
		printf("q가 비었습니다");
		return 0;
	}
	return q->data[++q->front];
}
void printAll( Queue *q ){
	// 0 부터 배열크기-1 에서  front+1 ~rear사이의 데이터만 출력
	int i;
	for(i=0;i<q->size;i++){
		if (i<=q->front || i > q->rear){
			printf("%7c",'|');
		}
		else{
			// , , 사이에 입력
			printf("%4d%3c",q->data[i],'|');
		 }
	}
	printf("\n");
}

void destroyQueue( Queue * q ){
	free(q->data);// q->data 동적 메모리 해제
	free(q);// q 동적 메모리 해제
}
