#include <stdio.h>
#include <stdlib.h>

// 트리 노드 구조체 정의
typedef struct TreeNode {
    char data;
    struct TreeNode *left, *right;
} TreeNode;

// 루트 노드 생성 함수
TreeNode* createNode(char data, TreeNode* leftNode, TreeNode* rightNode) {
    TreeNode* node = (TreeNode*)malloc(sizeof(TreeNode));
    if (node == NULL) {
        fprintf(stderr, "Memory allocation failed.\n");
        exit(1);
    }
    node->data = data;
    node->left = leftNode;
    node->right = rightNode;
    
    return node;
}

// 전위 순회 함수
void preorderTraversal(TreeNode* root) {
    if (root) {
        printf("%c", root->data);
        preorderTraversal(root->left);
        preorderTraversal(root->right);
    }
}

// 중위 순회 함수
void inorderTraversal(TreeNode* root) {
    if (root) {
        inorderTraversal(root->left);
        printf("%c", root->data);
        inorderTraversal(root->right);
    }
}

// 후위 순회 함수
void postorderTraversal(TreeNode* root) {
    if (root) {
        postorderTraversal(root->left);
        postorderTraversal(root->right);
        printf("%c", root->data);
    }
}

// 메모리 해제 함수
void freeTree(TreeNode* root) {
    if (root) {
        freeTree(root->left);
        freeTree(root->right);
        free(root);
    }
}

int main() {
    // 트리 구성
    TreeNode* n7 = createNode('D', NULL, NULL);
    TreeNode* n6 = createNode('C', NULL, NULL);
    TreeNode* n5 = createNode('B', NULL, NULL);
    TreeNode* n4 = createNode('A', NULL, NULL);
    TreeNode* n3 = createNode('/', n6, n7);
    TreeNode* n2 = createNode('*', n4, n5);
    TreeNode* n1 = createNode('-', n2, n3);

    // 트리 순회 출력
    printf("\nPreorder  : ");
    preorderTraversal(n1);
    
    printf("\nInorder   : ");
    inorderTraversal(n1);
    
    printf("\nPostorder : ");
    postorderTraversal(n1);

    // 메모리 해제
    freeTree(n1);
    
    return 0;
}
